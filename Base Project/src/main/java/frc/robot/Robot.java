// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Robot.

package frc.robot;

<<<<<<< Updated upstream
import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;
import edu.wpi.first.hal.HAL;
import edu.wpi.first.wpilibj.TimedRobot;
=======
import static frc.robot.Constants.ControllerConstants.OPERATOR_PORT;
import static frc.robot.Constants.IntakeConstants.ARM_PORT;
import static frc.robot.Constants.IntakeConstants.FOLD_SPEED;
import static frc.robot.Constants.IntakeConstants.GROUND_SWITCH;
import static frc.robot.Constants.IntakeConstants.INTAKE_PORT;
import static frc.robot.Constants.IntakeConstants.INTAKE_SPEED;
import static frc.robot.Constants.IntakeConstants.LIMIT_SWITCH;
import static frc.robot.Constants.IntakeConstants.LeftTalonSRX;
import static frc.robot.Constants.IntakeConstants.LeftVictorSPX;
import static frc.robot.Constants.IntakeConstants.OPEN_SPEED;
import static frc.robot.Constants.IntakeConstants.OUTAKE_SPEED;
import static frc.robot.Constants.IntakeConstants.RightTalonSRX;
import static frc.robot.Constants.IntakeConstants.RightVictorSPX;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.A;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.B;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.LB;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.LEFT_STICK_Y;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.RB;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.RIGHT_STICK_X;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.X;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.Y;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import com.ctre.phoenix.sensors.WPI_PigeonIMU;
import com.revrobotics.CANSparkLowLevel.MotorType;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;

import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;
import edu.wpi.first.hal.HAL;
import edu.wpi.first.math.controller.ArmFeedforward;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
>>>>>>> Stashed changes
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    private Command m_autonomousCommand;

    private RobotContainer m_robotContainer;

<<<<<<< Updated upstream
=======
    public CANSparkMax intake = new CANSparkMax(INTAKE_PORT, MotorType.kBrushless);
    public CANSparkMax arm_motor = new CANSparkMax(ARM_PORT, MotorType.kBrushless);
    private RelativeEncoder arm_Encoder = arm_motor.getEncoder();
    
    public Joystick controller = new Joystick(OPERATOR_PORT);

    private WPI_TalonSRX leftTalon = new WPI_TalonSRX(LeftTalonSRX);
    private WPI_TalonSRX rightTalon = new WPI_TalonSRX(RightTalonSRX);
    private WPI_VictorSPX leftVictor = new WPI_VictorSPX(LeftVictorSPX);
    private WPI_VictorSPX rightVictor = new WPI_VictorSPX(RightVictorSPX);


    DigitalInput foldLimitSwitch = new DigitalInput(LIMIT_SWITCH);
    DigitalInput openLimitSwitch = new DigitalInput(GROUND_SWITCH);
    ArmFeedforward armFeedforward = new ArmFeedforward(0, 0.048, 0);

    private DifferentialDrive drive = new DifferentialDrive(leftVictor::set, rightVictor::set);
    boolean open = false;
    boolean fold = false;

    double counter = 0.1;

    enum IntakeState{
        toIntake,
        toOuttake,
        toHold
    }

    IntakeState intakeState = IntakeState.toHold;
    IntakeState lastIntakeState = IntakeState.toHold;


    private Timer timer = new Timer();
    enum Phase{
        start,
        open,
        take,
        fold,
        back,
        done
    }
    Phase autonomousPhase;

    int turns = 0;
    private Timer driveTimer = new Timer();
    WPI_PigeonIMU gyro = new WPI_PigeonIMU(7);
    double lastAngle;

    SendableChooser<Integer> m_chooser = new SendableChooser<>();

>>>>>>> Stashed changes
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        // Instantiate our RobotContainer.  This will perform all our button bindings, and put our
        // autonomous chooser on the dashboard.
        m_robotContainer = RobotContainer.getInstance();
        HAL.report(tResourceType.kResourceType_Framework, tInstances.kFramework_RobotBuilder);
        enableLiveWindowInTest(true);
<<<<<<< Updated upstream
=======
        
        leftVictor.setInverted(false);
        leftTalon.setInverted(false);
        rightTalon.setInverted(true);
        rightVictor.setInverted(true);

        leftTalon.follow(leftVictor);
        rightTalon.follow(rightVictor);

        m_chooser.addOption("square", 0);
        m_chooser.addOption("sequance", 1);
        SmartDashboard.putData("auto chooser", m_chooser);
>>>>>>> Stashed changes
    }

    /**
    * This function is called every robot packet, no matter the mode. Use this for items like
    * diagnostics that you want ran during disabled, autonomous, teleoperated and test.
    *
    * <p>This runs after the mode specific periodic functions, but before
    * LiveWindow and SmartDashboard integrated updating.
    */
    @Override
    public void robotPeriodic() {
        // Runs the Scheduler.  This is responsible for polling buttons, adding newly-scheduled
        // commands, running already-scheduled commands, removing finished or interrupted commands,
        // and running subsystem periodic() methods.  This must be called from the robot's periodic
        // block in order for anything in the Command-based framework to work.
        CommandScheduler.getInstance().run();
<<<<<<< Updated upstream
=======
        SmartDashboard.putNumber("FWD", controller.getRawAxis(LEFT_STICK_Y));
        SmartDashboard.putNumber("ROT", controller.getRawAxis(RIGHT_STICK_X));

        if(!foldLimitSwitch.get()){
            arm_Encoder.setPosition(-0.323);
            
        }

        SmartDashboard.putNumber("gyro", gyro.getYaw());
        SmartDashboard.putNumber("last Angle", lastAngle);
>>>>>>> Stashed changes
    }


    /**
    * This function is called once each time the robot enters Disabled mode.
    */
    @Override
    public void disabledInit() {
    }

    @Override
    public void disabledPeriodic() {
    }

    /**
    * This autonomous runs the autonomous command selected by your {@link RobotContainer} class.
    */
    @Override
    public void autonomousInit() {
        m_autonomousCommand = m_robotContainer.getAutonomousCommand();

        // schedule the autonomous command (example)
        if (m_autonomousCommand != null) {
            m_autonomousCommand.schedule();
        }

        timer.restart();
        autonomousPhase = Phase.start;

        driveTimer.restart();
        lastAngle = gyro.getYaw();

        counter = 0;
    }

    private boolean turn(double angle){
        if (gyro.getYaw() <= lastAngle + angle){
            drive.arcadeDrive(0, 0.14, false);
            return false;
        }
        lastAngle = gyro.getYaw();
        return true;
    }

    private void square(){
        if (counter < 4){
            if (driveTimer.get() < 2){
                drive.arcadeDrive(0.18, 0, false);
                return;
            }
                        
            if (turn(88)){
                driveTimer.restart();
                counter++;
            }
        }
    }

    private void seq(){
        switch (autonomousPhase){
                    case start:
                        if (timer.get() >= 2){
                            autonomousPhase = Phase.open;
                            break;
                        }

                    drive.arcadeDrive(0.2 , 0, false);
                    break;

                    case open:
                        if (!openLimitSwitch.get()){
                            autonomousPhase = Phase.take;
                            intake.set(INTAKE_SPEED);
                            arm_motor.set(0);
                            timer.restart();
                            break;
                        }

                        arm_motor.set(resistGravity() + OPEN_SPEED);
                        break;

                    case take:
                        if (timer.get() >= 2){
                            autonomousPhase = Phase.fold;
                            intake.set(0);
                            break;
                        }
                        break;
            
                    case fold:
                        if (!foldLimitSwitch.get()){
                            autonomousPhase = Phase.back;
                            arm_motor.set(0);
                            timer.restart();
                            break;
                        }

                        arm_motor.set(resistGravity() + FOLD_SPEED);
                        break;

                    case back:
                        if (timer.get() >=2){
                            autonomousPhase = Phase.done;
                            break;
                        }

                        drive.arcadeDrive(-0.2 , 0, false);
                        break;
                    }
    }

    /**
    * This function is called periodically during autonomous.
    */
    @Override
    public void autonomousPeriodic() {
        // SmartDashboard.putNumber("clock", timer.get());
        // switch (autonomousPhase) {
        //     case start:
        //         SmartDashboard.putString("autoMode", "start");
        //         break;
        //     case take:
        //         SmartDashboard.putString("autoMode", "take");
        //         break;
        //     case fold:
        //         SmartDashboard.putString("autoMode", "fold");
        //         break;
        //     case back:
        //         SmartDashboard.putString("autoMode", "back");
        //         break;
            
        // }
        
        

        switch (m_chooser.getSelected()){
            case 0:
                square();
                break;
            case 1:
                seq();
                break;
        }
        
        

    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (m_autonomousCommand != null) {
            m_autonomousCommand.cancel();
        }
    }

    /**
     * This function is called periodically during operator control.
     */
    @Override
    public void teleopPeriodic() {
<<<<<<< Updated upstream
=======
        
        moveArm();

        intake();


        drive.arcadeDrive(-controller.getRawAxis(LEFT_STICK_Y) /2 , -controller.getRawAxis(RIGHT_STICK_X) / 2);

>>>>>>> Stashed changes
    }

    @Override
    public void testInit() {
        // Cancels all running commands at the start of test mode.
        CommandScheduler.getInstance().cancelAll();
    }

    /**
    * This function is called periodically during test mode.
    */
    @Override
    public void testPeriodic() {
    }

}